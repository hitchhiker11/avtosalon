---
export interface Props {
  variant?: 'default' | 'primary' | 'accent' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  disabled?: boolean;
}

const {
  variant = 'default',
  size = 'md',
  href,
  type = 'button',
  class: className,
  disabled = false,
  ...props
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50';

const variants = {
  default: 'bg-white text-dark-900 hover:bg-gray-100 border border-gray-200',
  primary: 'bg-dark-800 text-white hover:bg-dark-700 border border-dark-600',
  accent: 'bg-accent-500 text-white hover:bg-accent-600 shadow-lg hover:shadow-xl',
  outline: 'border-2 border-accent-500 text-accent-500 hover:bg-accent-500 hover:text-white',
  ghost: 'text-white hover:bg-white/10 hover:text-accent-400'
};

const sizes = {
  sm: 'h-9 px-3 text-sm',
  md: 'h-11 px-6 text-base',
  lg: 'h-13 px-8 text-lg'
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className || ''}`;

const Component = href ? 'a' : 'button';
---

<Component
  href={href}
  type={!href ? type : undefined}
  class={classes}
  disabled={disabled}
  {...props}
>
  <slot />
</Component> 